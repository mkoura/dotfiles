" Initial config {{{
" vim:foldmethod=marker:foldlevel=0

" character encoding used inside Vim
"scriptencoding utf-8
"set encoding=utf-8

set nocompatible

" remap <leader> and <localleader> to ,
let mapleader = ','
let maplocalleader = ','

" vim/nvim differences
let myhome = expand('~')
if has('nvim')
  let mybasedir = myhome . '/.local/share/nvim'
  let myconfdir = myhome . '/.config/nvim'
  let g:python_host_prog = myhome . '/.local/python_venvs/neovim2/bin/python2'
  let g:python3_host_prog = myhome . '/.local/python_venvs/neovim3/bin/python3'
else
  let mybasedir = myhome . '/.vim'
  let myconfdir = myhome . '/.vim'
  " make sure python3 is initialized before python2
  if has('python3')
  endif
endif

" highlight extra whitespace
" MUST be inserted BEFORE the colorscheme command
augroup colorsgrp
  autocmd!
  au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
  au InsertLeave * match ExtraWhitespace /\s\+$/
augroup END

" }}}


" Plugins {{{

" Install:
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
call plug#begin(mybasedir . '/plugged')

" installed bundles
" general
Plug 'altercation/vim-colors-solarized'
Plug 'artnez/vim-wipeout'
Plug 'godlygeek/tabular' " required by plasticboy/vim-markdown
Plug 'easymotion/vim-easymotion'
" Install:
" dnf install the_silver_searcher (Debian: silversearcher-ag)
" dnf install fzf
Plug 'junegunn/fzf.vim'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'wellle/tmux-complete.vim' " depends on neocomplete/deoplete

" coding
Plug 'chrisbra/NrrwRgn'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'jpalardy/vim-slime'
" Install: apt-get install exuberant-ctags (dnf install ctags)
Plug 'ludovicchabant/vim-gutentags'
Plug 'luochen1990/rainbow'
" requires exuberant-ctags
Plug 'majutsushi/tagbar'
" javascript-related post-install actions go here
Plug 'pangloss/vim-javascript', { 'do': 'npm install prettier' }
Plug 'Shougo/neosnippet.vim' | Plug 'Shougo/neosnippet-snippets'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'

" VCS
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'tpope/vim-fugitive' | Plug 'tpope/vim-rhubarb'

" vim/neovim plugins
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " javascript for deoplete
  Plug 'wokalski/autocomplete-flow', { 'for': 'javascript', 'do': 'npm install flow-bin' }
  " python for deoplete
  Plug 'zchee/deoplete-jedi', { 'for': 'python' }
else
  Plug 'Shougo/neocomplete.vim'
endif

" initialize plugin system
call plug#end()

" }}}


" Plugins config {{{

"
" Python with virtualenv support
"
if !(has('gui_running') || has('nvim'))
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  try:
    # execfile(activate_this, dict(__file__=activate_this))
    with open(activate_this) as f:
      exec(f.read(), dict(__file__=activate_this))
  except IOError:
    pass
EOF
endif


"
" Ag/grep
"
" use ag over grep
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
  set grepformat^=%f:%l:%c:%m " file:line:column:message
endif


"
" netrw
"
nnoremap <F2> :Explore<CR>


"
" matchit
"
runtime macros/matchit.vim


"
" Gundo
"
nnoremap <F4> :GundoToggle<CR>


"
" Tagbar
"
nnoremap <F8> :TagbarToggle<CR>


"
" fzf
"
nnoremap <C-t> :Files<CR>
nnoremap <leader>ww :Windows<CR>
" display all lines with keyword under cursor
nnoremap <leader>ff :BLines '<C-r><C-w><CR>
" search for word under cursor
nnoremap <leader>gr :Ag <C-r><C-w><CR>


"
" jedi-vim
"
" for use with deoplete/neocomplete
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0

" display function call signatures in command line
set noshowmode
let g:jedi#show_call_signatures = 2

let g:jedi#goto_command = '<C-]>'
let g:jedi#goto_assignments_command = '<leader>ja'
let g:jedi#goto_definitions_command = '<leader>jd'
let g:jedi#documentation_command = '<leader>gd'
let g:jedi#usages_command = '<leader>uu'
let g:jedi#rename_command = '<leader>re'


"
" neosnippet
"
" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-j> <Plug>(neosnippet_expand_or_jump)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" conceal markers
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" user snippets
let g:neosnippet#snippets_directory = myconfdir . '/snippets'


"
" vim-slime
"
let g:slime_target = 'tmux'
let g:slime_default_config = {'socket_name': 'default', 'target_pane': ':.1'}
let g:slime_python_ipython = 1

" send word under the cursor
nnoremap <leader>rr :SlimeSend1 <C-r><C-w><CR>


"
" vim-airline
"
set laststatus=2 " show statusline all the time
let g:airline_theme = 'solarized' " make sure solarized is used
let g:airline_powerline_fonts = 1 " Install: dnf install powerline-fonts (Debian: fonts-powerline)
let g:airline_exclude_preview = 1 " disble for preview windows
let g:airline#extensions#tabline#enabled = 1 " list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " show just the filename
let g:airline#extensions#tabline#tab_nr_type = 1 " show tab numbers


"
" vim-rooter
"
let g:rooter_use_lcd = 1
let g:rooter_silent_chdir = 1


"
" ale
"
" leave the gutter always open
let g:ale_sign_column_always = 1
" airline integration
let g:airline#extensions#ale#enabled = 1
" increase delay after which the linters will be run
let g:ale_lint_delay = 500
" flake8 args
let g:ale_python_flake8_args = '--max-line-length=100'


"
" rainbow (Rainbow Parentheses Improved)
"
let g:rainbow_active = 1
" solarized compatible colors
let g:rainbow_conf = {
  \   'ctermfgs': ['brown', 'Darkblue', 'darkgray', 'darkgreen'],
  \   'guifgs': ['RoyalBlue3', 'SeaGreen3', 'DarkOrchid3', 'firebrick3'],
  \}


"
" vim-markdown
"
" fold in a style like python-mode
let g:vim_markdown_folding_style_pythonic = 1
" disable conceal
let g:vim_markdown_conceal = 0


if has('nvim')
  "
  " deoplete
  "
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  " change the source rank
  call deoplete#custom#set('jedi', 'rank', 9999)

else

  "
  " neocomplete
  "
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
  "let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

endif


"
" deoplete/neocomplete
"
" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <Up>, <Down>" : completion.
inoremap <expr><Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr><Up> pumvisible() ? "\<C-p>" : "\<Up>"


"
" tmux-complete.vim
"
" no need for additional trigger when using neocomplete/deoplete
let g:tmuxcomplete#trigger = ''

" }}}


" Sets {{{
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim

"
" colors
"
syntax enable
if &term=~'linux'
  set background=dark
else
  "set t_Co=256
  "set background=light
  set background=dark
  colorscheme solarized
endif

" background settings
command! Bglight :set background=light
command! Bgdark :set background=dark


let &directory = mybasedir . '/swap//' " where to save swap files
set history=1000 " mum of entries remembered for ':' commands and search patterns
set cursorline " highlight line with cursor
set showcmd " show that vim is waiting for key
set scrolloff=3 " min number of lines to keep above and below the cursor
set sidescrolloff=5 " min number of columns to keep to sides
set backspace=indent,eol,start " backspace for dummies
"set number relativenumber  " relative line numbers
"set mouse=a " enable mouse for all modes
set hidden " switch files without saving them first
set clipboard=unnamedplus " use + register for copy-paste
set switchbuf=split " use new split
set lazyredraw " redraw only when we need to
"set completeopt-=preview " turn off the preview window
set ruler " show the line and column number of the cursor position
set autoread " automatically read again changed files
set timeoutlen=800 " mapping delays
set tabpagemax=50 " maximum number of tab pages
set display+=lastline " display as much as possible of the last line
set formatoptions+=j " delete comment character when joining commented lines
set nrformats-=octal " numbers starting with zero will NOT be considered octal
set wmh=0 " don't show one line of minimized split

" undo
let &undodir = mybasedir . '/undo//'   " where to save undo histories
set undofile " persistent undo
set undolevels=500  " maximum number of changes that can be undone
set undoreload=5000 " maximum number lines to save for undo on a buffer reload

" indentation
set autoindent " copy indent from current line when starting a new line
set smarttab " insert configured number of blanks on <Tab>
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab " use spaces instead of tabs

" search
set incsearch " search as characters are entered
set hlsearch " highlight search terms
" use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" don't look any further for tags if ./tags is present
if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" create viminfo if missing
if !empty(&viminfo)
  set viminfo^=!
endif

" bash-like tab completion
set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.bak,*.o,*.aut,*.dvi

" don't save backup files
set nobackup
set nowritebackup

" highlight matching bracket
set showmatch
set matchpairs=(:),[:],{:},<:>

" sessions
set ssop-=options " do not store global and local values in a session
set ssop-=folds   " do not store folds

" }}}


" Commands {{{

" Rmw = remove trailing whitespaces and ^M chars
command! Rmw %s/\s\+$//e

" spellchecking in current buffer
command! SpellEN :setlocal spell spelllang=en_us
command! SpellOff :setlocal nospell

" R = command output in new tab
command! -nargs=* -complete=shellcmd Rr tabnew<Bar>setlocal buftype=nofile bufhidden=hide noswapfile nowrap<Bar>0r !<args>
command! -nargs=* -complete=shellcmd R  tabnew<Bar>setlocal buftype=nofile bufhidden=hide noswapfile nowrap<Bar>exe '0r !<args>'<Bar>filetype detect

" }}}


" Autocommands {{{

augroup configgroup
  autocmd!

  " autocompletion
  au FileType css setlocal omnifunc=csscomplete#CompleteCSS
  au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  "au FileType ruby setlocal omnifunc=rubycomplete#Complete
  au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  if !has('nvim')
    " use deoplete-jedi in nvim instead
    au FileType python setlocal omnifunc=jedi#completions
    " use autocomplete-flow in nvim instead
    au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  endif

  " rainbow plugin - workaround to make it work with pangloss/vim-javascript
  au FileType javascript syntax clear jsFuncBlock

  " requires autopep8 command
  " Install: dnf install python2-autopep8
  au FileType python setlocal formatprg=autopep8\ --max-line-length\ 100\ -

  " requires prettier command
  au FileType javascript setlocal formatprg=prettier\ --stdin

  " vertical bar after 100th character
  au FileType c,cpp,go,python,sh,javascript,java,typescript,ruby setlocal colorcolumn=101

  " indentation
  au FileType make setlocal noexpandtab " use real tabs for Makefiles
  au FileType sh,vim,ruby setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

  " override 'switchbuf' for quickfix windows
  au FileType qf setlocal switchbuf=useopen

  " word wrapping for text files
  au FileType txt,markdown,tex setlocal wrap linebreak nolist textwidth=0 wrapmargin=0

  " don't conceal quotes in JSON
  au FileType json setlocal conceallevel=0

  " restore last position in file when reopened
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  " swap to the last viewed tab
  " http://stackoverflow.com/questions/2119754/switch-to-last-active-tab-in-vim
  au TabLeave * let g:lasttab = tabpagenr()
  let g:lasttab = 1
  nmap <M-t><M-t> :exe 'tabn '.g:lasttab<CR>
  imap <M-t><M-t> <ESC>:exe 'tabn '.g:lasttab<CR>

  " open the location/quickfix window after :make, :grep, :lvimgrep and friends
  " if there are valid locations/errors
  au QuickFixCmdPost [^l]* cwindow
  au QuickFixCmdPost l*    lwindow


  " Follow symlinks when opening a file {{{
  " NOTE: this happens with directory symlinks anyway (due to Vim's chdir/getcwd
  "       magic when getting filenames).
  " Sources:
  "  - https://github.com/tpope/vim-fugitive/issues/147#issuecomment-7572351
  "  - http://www.reddit.com/r/vim/comments/yhsn6/is_it_possible_to_work_around_the_symlink_bug/c5w91qw
  "  - https://github.com/blueyed/dotfiles/blob/master/vimrc
  function! MyFollowSymlink(...)
    if exists('w:no_resolve_symlink') && w:no_resolve_symlink
      return
    endif
    if &ft == 'help'
      return
    endif
    let fname = a:0 ? a:1 : expand('%')
    if fname =~ '^\w\+:/'
      " Do not mess with 'fugitive://' etc.
      return
    endif
    let fname = simplify(fname)

    let resolvedfile = resolve(fname)
    if resolvedfile == fname
      return
    endif
    let resolvedfile = fnameescape(resolvedfile)
    let sshm = &shm
    set shortmess+=A  " silence ATTENTION message about swap file (would get displayed twice)
    redraw  " Redraw now, to avoid hit-enter prompt.
    exe 'file ' . resolvedfile
    let &shm = sshm

    unlet! b:git_dir
    call fugitive#detect(resolvedfile)

    if &modifiable
      " Only display a note when editing a file, especially not for `:help`.
      redraw  " Redraw now, to avoid hit-enter prompt.
      echomsg 'Resolved symlink: =>' resolvedfile
    endif
  endfunction
  command! -bar FollowSymlink call MyFollowSymlink()
  command! ToggleFollowSymlink let w:no_resolve_symlink = !get(w:, 'no_resolve_symlink', 0) | echo "w:no_resolve_symlink =>" w:no_resolve_symlink
  au BufReadPost * nested call MyFollowSymlink(expand('%'))
  " }}}

augroup END

" }}}


" Key mappings {{{

" fix Alt key in console
" for mapped keys
if !(has('gui_running') || has('nvim'))
  set <M-h>=h
  set <M-j>=j
  set <M-k>=k
  set <M-l>=l
  set <M-t>=t
endif

" split navigations
nnoremap <M-j> <C-W><C-J>
nnoremap <M-k> <C-W><C-K>
nnoremap <M-l> <C-W><C-L>
nnoremap <M-h> <C-W><C-H>

" moving lines up and down
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" move tab to right
nmap <M-t><M-l> :tabm +1<CR>
" move tab to left
nmap <M-t><M-h> :tabm -1<CR>

" new tab
nnoremap <leader>tt :$tabnew<CR>

" sane indentation on paste
noremap <leader>pt :set invpaste<CR>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" search for visually selected text
vnoremap // y/<C-R>"<CR>

" highlight word without jumping
nnoremap * *``

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" recoverable undo
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" for when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" change Working Directory to that of the current file
cmap cd. lcd %:p:h

" }}}
