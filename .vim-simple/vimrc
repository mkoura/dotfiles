" Initial config {{{
" vim:foldmethod=marker:foldlevel=0

" character encoding used inside Vim
"scriptencoding utf-8
"set encoding=utf-8

set nocompatible

" remap <leader> and <localleader> to ,
let mapleader = ','
let maplocalleader = ','

" highlight extra whitespace
" MUST be inserted BEFORE the colorscheme command
augroup colorsgrp
  autocmd!
  au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
  au InsertLeave * match ExtraWhitespace /\s\+$/
augroup END


"
" Ag/grep
"
" use ag over grep
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
  set grepformat^=%f:%l:%c:%m " file:line:column:message
endif


"
" netrw
"
nnoremap <F2> :Explore<CR>


"
" matchit
"
runtime macros/matchit.vim

" }}}


" Sets {{{
" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim

"
" colors
"
syntax enable
if &term=~'linux'
  set background=dark
else
  "set t_Co=256
  "set background=light
  set background=dark
  colorscheme solarized
endif

" background settings
command! Bglight :set background=light
command! Bgdark :set background=dark

set history=1000 " mum of entries remembered for ':' commands and search patterns
set cursorline " highlight line with cursor
set showcmd " show that vim is waiting for key
set scrolloff=3 " min number of lines to keep above and below the cursor
set sidescrolloff=5 " min number of columns to keep to sides
set backspace=indent,eol,start " backspace for dummies
"set number relativenumber  " relative line numbers
"set mouse=a " enable mouse for all modes
set hidden " switch files without saving them first
set clipboard=unnamedplus " use + register for copy-paste
set switchbuf=split " use new split
set lazyredraw " redraw only when we need to
"set completeopt-=preview " turn off the preview window
set ruler " show the line and column number of the cursor position
set autoread " automatically read again changed files
set timeoutlen=800 " mapping delays
set tabpagemax=50 " maximum number of tab pages
set display+=lastline " display as much as possible of the last line
set formatoptions+=j " delete comment character when joining commented lines
set nrformats-=octal " numbers starting with zero will NOT be considered octal
set wmh=0 " don't show one line of minimized split

" indentation
set autoindent " copy indent from current line when starting a new line
set smarttab " insert configured number of blanks on <Tab>
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab " use spaces instead of tabs

" search
set incsearch " search as characters are entered
set hlsearch " highlight search terms
" use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" don't look any further for tags if ./tags is present
if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" create viminfo if missing
if !empty(&viminfo)
  set viminfo^=!
endif

" bash-like tab completion
set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.bak,*.o,*.aut,*.dvi

" don't save backup files
set nobackup
set nowritebackup

" highlight matching bracket
set showmatch
set matchpairs=(:),[:],{:},<:>

" sessions
set ssop-=options " do not store global and local values in a session
set ssop-=folds   " do not store folds

" }}}


" Commands {{{

" Rmw = remove trailing whitespaces and ^M chars
command! Rmw %s/\s\+$//e

" spellchecking in current buffer
command! SpellEN :setlocal spell spelllang=en_us
command! SpellOff :setlocal nospell

" R = command output in new tab
command! -nargs=* -complete=shellcmd Rr tabnew<Bar>setlocal buftype=nofile bufhidden=hide noswapfile nowrap<Bar>0r !<args>
command! -nargs=* -complete=shellcmd R  tabnew<Bar>setlocal buftype=nofile bufhidden=hide noswapfile nowrap<Bar>exe '0r !<args>'<Bar>filetype detect

" }}}


" Autocommands {{{

augroup configgroup
  autocmd!

  " vertical bar after 100th character
  au FileType c,cpp,go,python,sh,javascript,java,typescript,ruby setlocal colorcolumn=101

  " indentation
  au FileType make setlocal noexpandtab " use real tabs for Makefiles
  au FileType sh,vim,ruby setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

  " override 'switchbuf' for quickfix windows
  au FileType qf setlocal switchbuf=useopen

  " word wrapping for text files
  au FileType txt,markdown,tex setlocal wrap linebreak nolist textwidth=0 wrapmargin=0

  " don't conceal quotes in JSON
  au FileType json setlocal conceallevel=0

  " restore last position in file when reopened
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  " swap to the last viewed tab
  " http://stackoverflow.com/questions/2119754/switch-to-last-active-tab-in-vim
  au TabLeave * let g:lasttab = tabpagenr()
  let g:lasttab = 1
  nmap <M-t><M-t> :exe 'tabn '.g:lasttab<CR>
  imap <M-t><M-t> <ESC>:exe 'tabn '.g:lasttab<CR>

  " open the location/quickfix window after :make, :grep, :lvimgrep and friends
  " if there are valid locations/errors
  au QuickFixCmdPost [^l]* cwindow
  au QuickFixCmdPost l*    lwindow
augroup END

" }}}


" Key mappings {{{

" fix Alt key in console
" for mapped keys
if ! has("gui_running")
  set <M-h>=h
  set <M-j>=j
  set <M-k>=k
  set <M-l>=l
  set <M-t>=t
endif

" split navigations
nnoremap <M-j> <C-W><C-J>
nnoremap <M-k> <C-W><C-K>
nnoremap <M-l> <C-W><C-L>
nnoremap <M-h> <C-W><C-H>

" moving lines up and down
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" move tab to right
nmap <M-t><M-l> :tabm +1<CR>
" move tab to left
nmap <M-t><M-h> :tabm -1<CR>

" new tab
nnoremap <leader>tt :$tabnew<CR>

" sane indentation on paste
noremap <leader>pt :set invpaste<CR>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" search for visually selected text
vnoremap // y/<C-R>"<CR>

" highlight word without jumping
nnoremap * *``

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" recoverable undo
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" display all lines with keyword under cursor and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" for when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" change Working Directory to that of the current file
cmap cd. lcd %:p:h

" }}}
