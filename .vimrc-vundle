""
"" Initial config
""

set nocompatible

" remap <leader> to ,
let mapleader=',' " remap <leader>



""
"" Plugins config
""


"
" Vundle setting
"
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
"
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" installed bundles
"Bundle 'jmcantrell/vim-virtualenv' " use mkoura/vim-virtualenv until PYTHONPATH fixed
Bundle 'Lokaltog/vim-easymotion'
Bundle 'SirVer/ultisnips'
Bundle 'Valloric/YouCompleteMe'
"Bundle 'Yggdroot/indentLine'
Bundle 'altercation/vim-colors-solarized'
Bundle 'benmills/vimux'
Bundle 'bling/vim-airline'
Bundle 'davidhalter/jedi-vim'
Bundle 'honza/vim-snippets'
Bundle 'jlanzarotta/bufexplorer'
Bundle 'kien/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'mkitt/tabline.vim'
Bundle 'mkoura/vim-virtualenv'
Bundle 'myusuf3/numbers.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/Gundo'

filetype plugin indent on


"
" Nerdtree
"
nnoremap <F2> :NERDTreeToggle<CR>
"let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1


"
" Gundo
"
nnoremap <F4> :GundoToggle<CR>


"
" Tagbar
"
nnoremap <F8> :TagbarToggle<CR>


"
" YouCompleteMe
"
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=1
" disable for python, use jedi-vim instead
let g:ycm_filetype_blacklist={
      \ 'python' : 1,
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1
      \}

" enable completion from tags
let g:ycm_collect_identifiers_from_tags_files=1
" fallback path to a compilation flags config file
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'

" enable omni completion
au FileType css setlocal omnifunc=csscomplete#CompleteCSS
au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"au FileType python setlocal omnifunc=pythoncomplete#Complete " use jedi-vim instead
au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
au FileType ruby setlocal omnifunc=rubycomplete#Complete

" GoTo command
au FileType c,cpp,javascript nnoremap <buffer> <leader>jd :YcmCompleter GoTo<CR>
au FileType c,cpp,javascript nnoremap <buffer> <leader>ja :YcmCompleter GoToDefinition<CR>


"
" jedi-vim
"
let g:jedi#popup_on_dot=0
let g:jedi#goto_definitions_command="<leader>jd"
let g:jedi#goto_assignments_command="<leader>ja"
let g:jedi#rename_command="<leader>re"
let g:jedi#usages_command="<leader>us"


"
" UltiSnips
"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-e>"
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsUsePythonVersion=2


"
" CtrlP
"
let g:ctrlp_max_files=50000


"
" Rope
"
"source ~/Source/repos/rope/rope.vim
"let ropevim_enable_shortcuts=0 " disable default shortcuts
"let ropevim_goto_def_newwin=1  " open external definitions in new buffer


"
" Syntastic
"
let g:syntastic_python_flake8_args="--max-line-length=160"
let g:syntastic_python_checkers=['pylint', 'flake8']
"let g:syntastic_python_checkers=['flake8']
let g:syntastic_disabled_filetypes = ['java']


"
" vim-airline
"
set laststatus=2 " show statusline all the time
let g:airline_theme="solarized" " make sure solarized is used


"
" supertab
"
"au FileType * if &ft != 'python' | let b:SuperTabDisabled = 1 | endif


" load matchit
runtime macros/matchit.vim



""
"" Vim settings
""


"
" colors
"
" highlight extra whitespace
" MUST be inserted BEFORE the colorscheme command
au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/

syntax enable
if &term=~'linux'
  set background=dark
else
  "set t_Co=256
  "set background=light
  set background=dark
  colorscheme solarized
endif


set directory=~/.vim/swap// " where to save swap files
set undodir=~/.vim/undo//   " where to save undo histories
set undofile " persistent undo
set undolevels=500  " maximum number of changes that can be undone
set undoreload=5000 " maximum number lines to save for undo on a buffer reload
set cursorline " highlight line with cursor
"set cursorcolumn " highlight column with cursor
set showcmd " show that vim is waiting for key
set showmatch " show matching brackets/parenthesis
set backspace=indent,eol,start " backspace for dummies
set number " line numbers on
set hlsearch " highlight search terms
"set mouse=a " set mouse=a
set hidden " switch files without saving them first
set clipboard=unnamedplus " use + register for copy-paste
"set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " highlight problematic whitespace
set pastetoggle=<F12> " pastetoggle (sane indentation on pastes)
set switchbuf+=usetab,newtab " switch to existing tab or use new tab

" bash-like tab completion
set wildmode=longest,list,full
set wildmenu
set wildignore=*~,*.bak,*.o,*.aut,*.dvi

" don't save backup files
set nobackup
set nowritebackup

" highlight matching bracket
set showmatch
set matchpairs=(:),[:],{:},<:>


"
" Autocommands
"

" vertical bar on after 80 character
au FileType c,cpp,javascript,python,java,sh setlocal colorcolumn=81

" indentation
au FileType c,cpp,javascript,python,java,sh,ant,xml setlocal expandtab shiftround tabstop=4 shiftwidth=4 softtabstop=4


"
" Shortcuts
"

" swap to the last viewed tab
" http://stackoverflow.com/questions/2119754/switch-to-last-active-tab-in-vim
let g:lasttab=1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab=tabpagenr()

" change Working Directory to that of the current file
cmap cd. lcd %:p:h

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" fix Alt key in console for
" Alt+j and Alt+k
if ! has("gui_running")
  set <M-j>=j
  set <M-k>=k
endif

" moving lines up and down
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" for when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" map <Leader>ff to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>


"
" Commands
"

" Rmw = remove trailing whitespaces and ^M chars
command! -bang Rmw %s/\s\+$//e<bang>

" R = command output in new tab
command! -nargs=* -complete=shellcmd Rr tabnew | setlocal buftype=nofile bufhidden=hide noswapfile nowrap | 0r !<args>
command! -nargs=* -complete=shellcmd R  tabnew | setlocal buftype=nofile bufhidden=hide noswapfile nowrap | execute '0r !<args>' | filetype detect
